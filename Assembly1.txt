mv r0, 0   // answer
mv r1, 0   // i
mv r2, 7   // hold 

Loop:
mv r2, 7
sub r3, r2, r1  // displacement

mv r2, 0
sw r1, r2    // store i in mem[0]

mv r2, 7	// grab mem[9]
mv r1, 2
add r2, r2, r1 
lw r2, r2     // given 

mv r2, 0
lw r1, r2   // reload i

sll r2, r2, r1   // gets rid of left bits
srl r2, r2, r1
srl r2, r2, r3     // get rid of right bits
sll r2, r2, r3
sub r3, r3, r1     // point to put the bit
srl r2, r2, r3


or r0, r0, r2  // place bit into answer


mv r2, 1       // increment i
add r1, r1, r2
mv r2, 8       // check if i == 8
beq r1, r2, break
beq r1, r1, Loop


break:
mv r1, 7       // store r0 into mem[10]
mv r2, 3
add r1, r1, r2
sw r0, r1

///////////////// Repeat for r[8] into r[11]  ////////////////////////////////////////
mv r0, 0   // answer
mv r1, 0   // i
mv r2, 7   // hold 

Loop2:
mv r2, 7
sub r3, r2, r1  // displacement

mv r2, 0
sw r1, r2    // store i in mem[0]

mv r2, 7	// grab mem[8]
mv r1, 1
add r2, r2, r1 
lw r2, r2     // given 

mv r2, 0
lw r1, r2   // reload i

sll r2, r2, r1 
srl r2, r2, r1
srl r2, r2, r3     // get bit
sll r2, r2, r3
sub r3, r3, r1
srl r2, r2, r3

or r0, r0, r2  // place bit into answer

mv r2, 1       // increment i
add r1, r1, r2
mv r2, 8       // check if i == 8
beq r1, r2, break2
beq r1, r1, Loop2


break2:
mv r1, 7       // store r0 into mem[10]
mv r2, 4
add r1, r1, r2
sw r0, r1
 
  

